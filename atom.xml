<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rails Generate Rent]]></title>
  <link href="http://pat-whitrock.github.io/atom.xml" rel="self"/>
  <link href="http://pat-whitrock.github.io/"/>
  <updated>2014-06-05T20:49:52-04:00</updated>
  <id>http://pat-whitrock.github.io/</id>
  <author>
    <name><![CDATA[Pat Whitrock]]></name>
    <email><![CDATA[patrick.whitrock@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Logic Behind Logical Operators]]></title>
    <link href="http://pat-whitrock.github.io/blog/2014/02/13/the-logic-behind-logical-operators/"/>
    <updated>2014-02-13T17:26:23-05:00</updated>
    <id>http://pat-whitrock.github.io/blog/2014/02/13/the-logic-behind-logical-operators</id>
    <content type="html"><![CDATA[<p>One of the most compelling aspects of the Ruby language is the sweetness of its syntactic sugar. This made the almost ubiquitous use of the <code>&amp;&amp;</code> and <code>||</code> operators over their semantically pleasing counterparts and and or all the more surprising to me. It turns out the two sets of operators are actually different in a meaningful way.</p>

<h3>So what’s the difference?</h3>

<p><strong>Precedence</strong>. Huh? Precedence is the same as <strong>Order of Operations</strong>. Remember <strong>PEMDAS</strong> from grade school? It’s that acronym for <strong>P</strong>arentheses, <strong>E</strong>xponents, <strong>M</strong>ultiplication, <strong>D</strong>ivision, <strong>A</strong>ddition, <strong>S</strong>ubtraction. The operators at the beginning of <strong>PEMDAS</strong> (parentheses) are considered first, then the next (exponents), and so on. Operator precedence in Ruby and other programming languages works the same way — there are just more operators. Got it? Got it. Moving on…</p>

<p><code>&amp;&amp;</code> and <code>||</code> have a higher precedence than <em>and</em> and <em>or</em>. This means Ruby will consider them first. Seems kind of harmless as long as we’re not mixing the two sets of operators (e.g. using <code>&amp;&amp;</code> and <code>or</code>) in the same expression, but the real problem doesn’t lie at either of these levels of precedence. The troublesome area is the space between.</p>

<p>Assignment operators fall below <code>&amp;&amp;</code> and <code>||</code>, but above and and or. This starts to cause all sorts of problems when we use the latter because expressions stop behaving the way we assume they should.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">value</span> <span class="o">=</span> <span class="kp">false</span> <span class="o">||</span> <span class="kp">true</span>  <span class="c1"># (value) = (false || true)</span>
</span><span class='line'>  <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="n">value</span>
</span><span class='line'>  <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="n">value</span> <span class="o">=</span> <span class="kp">false</span> <span class="ow">or</span> <span class="kp">true</span>  <span class="c1"># (value = false) or (true)</span>
</span><span class='line'>  <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="n">value</span>
</span><span class='line'>  <span class="o">=&gt;</span> <span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let’s say we want to compare two values and assign their return value to a variable. The first set of operations occurs how we expect. The expression <code>false || true</code> returns <code>true</code>. Then <code>true</code> is assigned to <code>value</code>. The second set of operations looks like it should do the same, but it doesn’t. The <code>=</code> assignment operator has the highest precedence, so <code>false</code> is assigned to <code>value</code>. Then <code>value</code> is compared to <code>true</code> via the <code>or</code> operator. This returns <code>true</code>, but <code>value</code> returns false, which wasn’t our intention.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">value</span> <span class="o">=</span> <span class="kp">true</span> <span class="o">&amp;&amp;</span> <span class="kp">false</span>  <span class="c1"># (value) = (true &amp;&amp; false)</span>
</span><span class='line'>  <span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="n">value</span>
</span><span class='line'>  <span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'><span class="n">value</span> <span class="o">=</span> <span class="kp">true</span> <span class="ow">and</span> <span class="kp">false</span>  <span class="c1"># (value = true) and (false)</span>
</span><span class='line'>  <span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="n">value</span>
</span><span class='line'>  <span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>We encounter the same problem with the code above.</p>

<p>There’s another key difference between these two sets of operators. <code>&amp;&amp;</code> is actually one level of precedence higher than <code>||</code>, whereas and and or share their level of precedence. I assume this is the case because of the assumption that we are more likely to compare chains of <code>&amp;&amp;</code> expressions with the <code>||</code> operator than vice versa because the former has more practical implementations. <code>and</code> and <code>or</code> have identical precedence, so their expressions are executed in the order in which they occur, which is rarely our intention.</p>

<h3>Cool, I get how it works. Now I can use and and or, right?</h3>

<p>Wrong. Why would you do that to yourself? Because it’s prettier? Unless you’re writing specific types of expressions, you’ll have to resort to using unnecessary parentheses. Gross.</p>

<p>Because you just read this awesome blog post and now you know how they work? Well, did everyone you know read this blog post? I didn’t think so. Even if you know your code does one thing, your collaborators will probably assume it does something else.</p>

<h3>TL;DR</h3>

<ol>
<li><code>&amp;&amp;</code> and <code>||</code> have a higher precedence than <code>and</code> and <code>or</code>.</li>
<li>Assignment operators, like =, have a lower precedence than <code>&amp;&amp;</code> and <code>||</code> (good), but higher than <code>and</code> and <code>or</code> (bad).</li>
<li><code>&amp;&amp;</code> has higher precedence than <code>||</code> (good). <code>and</code> and <code>or</code> have the same (bad).</li>
<li>Using <code>&amp;&amp;</code> and <code>||</code> is the convention for a reason. Don’t be that guy.</li>
<li>If you get confused, just use parentheses. Parentheses are your friends. Make it work now. Refactor later.</li>
</ol>

]]></content>
  </entry>
  
</feed>
