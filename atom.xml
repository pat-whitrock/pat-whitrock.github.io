<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rails Generate Rent]]></title>
  <link href="http://pat-whitrock.github.io/atom.xml" rel="self"/>
  <link href="http://pat-whitrock.github.io/"/>
  <updated>2014-06-06T00:30:32-04:00</updated>
  <id>http://pat-whitrock.github.io/</id>
  <author>
    <name><![CDATA[Pat Whitrock]]></name>
    <email><![CDATA[patrick.whitrock@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spacing Out]]></title>
    <link href="http://pat-whitrock.github.io/blog/2014/03/27/spacing-out/"/>
    <updated>2014-03-27T00:18:52-04:00</updated>
    <id>http://pat-whitrock.github.io/blog/2014/03/27/spacing-out</id>
    <content type="html"><![CDATA[<p>A couple weeks ago, I was scraping Wikipedia and hit a wall while I was parsing the data. I eventually traced my errors back to my parser, which was failing to split a string on a space I knew should be present in each iteration. I dug further, and eventually isolated the iteration causing the failure. I copy and pasted the string into IRB to test the split myself and, as expected, the string couldn’t be split on the space. <em>But the space did exist</em>. It was there. I could see it. I tried writing the same string out by hand and splitting it. That worked.</p>

<p><img src="https://d262ilb51hltx0.cloudfront.net/max/1000/1*O7CIpHjHmv7AvIY6n1izdA.png" alt="My brain is full of fuck" /></p>

<p>Did that not make any sense? Download this <a href="https://gist.github.com/pat-whitrock/9776536#file-encodings">gist</a> and try running the commands in IRB, PRY. They’re identical commands, but with different return values. If we’re splitting the same string on a space and getting different return values, it can only mean one thing — one of the spaces isn’t a space. But it’s clearly a space… I can see it. It’s a space. So, the real question is this…</p>

<h3>When is a space not a space?</h3>

<p>A space is a space is a space, right? Wrong. There are lots of types of spaces. And when my representation of a space is different from your representation of a space, the world explodes (or we can’t split strings). The reason I couldn’t split my string is the same fundamental reason you’re periodically annoyed by weird characters like �.</p>

<p>Different coded character sets are encoded differently. Computers outdate the internet, so character encoding wasn’t designed with interlingual string transfer in mind. Instead, we developed encoding standards optimized for our cultural contexts. In the realm of character encoding, these cultural contexts are referred to as <strong>character sets</strong>. For example, the the standard English characters we are accustomed to are of a different character set than that of the Spanish language or Chinese.</p>

<p>We developed different <strong>coded character sets</strong> for these different cultural contexts without the foresight that we might one day want to exchange information with each other through strings on such a massive scale. A coded character set is basically the combination of character codes and their respective characters.</p>

<p><img src="https://d262ilb51hltx0.cloudfront.net/max/600/1*djp9tqvUr9wA5lPw31lALQ.gif" alt="ASCII / American Standard Code for Information Interchange" /></p>

<p>ASCII became the American standard for encoding the characters we used. It could store all the needed characters in 7 bits, leaving a convenient 8th bit of <strong>character encodings</strong> for you to do weird stuff with, like make your computer beep at innocent bypassers.</p>

<p>Everyone else developed their own encoding standards for their language’s character set. There were even multiple coded character sets for the same real-life character set. Eventually, the west agreed on the ANSI standard, so we were clear on what the first 128 of 256 8-bit characters would represent, but left the remaining 128 for customization. However, Asian languages with exponentially more characters were never going to be able to fit their character sets within 8 bits, so they went down a completely different path.</p>

<h3>One encoding standard to rule them all</h3>

<p>Enter Unicode. The Unicode consortium sought to create a single character set including all of the world’s writing systems (and Klingon). The Unicode standard consists of a set of code charts for visual reference, an encoding method, set of standard <a href="http://en.wikipedia.org/wiki/Character_encoding">character encodings</a> and a set of reference data <a href="http://en.wikipedia.org/wiki/Computer_file">computer files</a>.</p>

<p>Unicode gave birth to the most commonly used character encodings in use today, most notably <strong>UTF-8</strong>. UTF-8 encodes ASCII characters in one byte, with the same codes used by ASCII. Its remaining characters are encoded using up to 4 bytes.</p>

<h3>Back to the spaces</h3>

<p>After doing some research, I stumbled upon a super helpful method for inspecting seemingly identical strings: <strong>codepoints</strong>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;Hello world&quot;</span><span class="o">.</span><span class="n">codepoints</span>
</span><span class='line'>  <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">72</span><span class="p">,</span> <span class="mi">101</span><span class="p">,</span> <span class="mi">108</span><span class="p">,</span> <span class="mi">108</span><span class="p">,</span> <span class="mi">111</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">119</span><span class="p">,</span> <span class="mi">111</span><span class="p">,</span> <span class="mi">114</span><span class="p">,</span> <span class="mi">108</span><span class="p">,</span> <span class="mi">100</span><span class="o">]</span>
</span><span class='line'><span class="s2">&quot;Hello world&quot;</span><span class="o">.</span><span class="n">codepoints</span>
</span><span class='line'>  <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">72</span><span class="p">,</span> <span class="mi">101</span><span class="p">,</span> <span class="mi">108</span><span class="p">,</span> <span class="mi">108</span><span class="p">,</span> <span class="mi">111</span><span class="p">,</span> <span class="mi">160</span><span class="p">,</span> <span class="mi">119</span><span class="p">,</span> <span class="mi">111</span><span class="p">,</span> <span class="mi">114</span><span class="p">,</span> <span class="mi">108</span><span class="p">,</span> <span class="mi">100</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice the difference? When you split a string on a space, you’re splitting on the integer ordinal of 32. For some strange reason, Wikipedia formatted one of 3,000 datapoints with a unicode non-breaking space, also known as integer ordinal 160. Why? So I could share this valuable learning experience with you, of course!</p>

<h3>Takeaways</h3>

<ol>
<li>Sometimes characters act differently than you would expect. In actuality, they might not be the same characters you think they are. Impostors!!!</li>
<li>Characters can’t lie to codepoints. Make them show their true selves if they’re acting shady.</li>
<li>If it looks like a space, but doesn’t act like a space, try this:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;Hello world&quot;</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/[[:space:]]/</span><span class="p">)</span>
</span><span class='line'>  <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;Hello&quot;</span><span class="p">,</span> <span class="s2">&quot;world&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://d262ilb51hltx0.cloudfront.net/max/800/1*2JDxyN3qdMoMx8WYDafyaQ.png" alt="Knowledge!" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customizing ActionView]]></title>
    <link href="http://pat-whitrock.github.io/blog/2014/03/12/customizing-actionview/"/>
    <updated>2014-03-12T23:53:03-04:00</updated>
    <id>http://pat-whitrock.github.io/blog/2014/03/12/customizing-actionview</id>
    <content type="html"><![CDATA[<p>The ActionView module is an awesome part of the Rails framework. It exists to handle template lookup and rendering and provides several helpers allowing you to minimize the back-and-forth between Ruby and HTML in your ERB templates.</p>

<h2>ActionView::Helpers</h2>

<p>If you’re developing a Rails application, you’ll most likely be making use of ActionView helpers within your templates. Rails will also be utilizing these helpers to create associations between different parts of your application based solely on naming conventions. ActionView is largely responsible for the power of the Rails framework that is provided by prioritizing convention over customization.</p>

<h3>Pluralization is awesome</h3>

<p>ActionView has some awesome methods, but pluralize is probably the most common and immediately useful helpers. It does precisely what it seems — it provides the plural version of a given word.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;Dunder Mifflin has </span><span class="si">#{</span><span class="n">pluralize</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="s2">&quot;employee&quot;</span><span class="p">)</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'>  <span class="o">=&gt;</span> <span class="no">Dunder</span> <span class="no">Mifflin</span> <span class="n">has</span> <span class="mi">4</span> <span class="n">employees</span><span class="o">.</span>
</span><span class='line'><span class="s2">&quot;Michael Scott Paper Company has </span><span class="si">#{</span><span class="n">pluralize</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;employee&quot;</span><span class="p">)</span><span class="si">}</span><span class="s2">.&quot;</span>
</span><span class='line'>  <span class="o">=&gt;</span> <span class="no">Michael</span> <span class="no">Scott</span> <span class="no">Paper</span> <span class="no">Company</span> <span class="n">has</span> <span class="mi">1</span> <span class="n">employee</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pluralize accounts for the dynamic nature of data-driven applications. The code above will use the correct version of a given word, without having to fill our templates with sloppy, repetitive code (hooray for being DRY). Without the pluralize helper, every time we use a dynamic number, we would be forced to write some code like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="no">Dundler</span> <span class="no">Mifflin</span> <span class="n">has</span> <span class="o">&lt;</span><span class="sx">%= @employees.count %&gt; &lt;%=</span>
</span><span class='line'>  <span class="k">if</span> <span class="vi">@employees</span><span class="o">.</span><span class="n">count</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>    <span class="s2">&quot;employee&quot;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="s2">&quot;employees&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="sx">%&gt;&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ActionView also does a great job of handling common irregular pluralizations. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;</span><span class="si">#{</span><span class="n">pluralize</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s2">&quot;woman&quot;</span><span class="p">)</span><span class="si">}</span><span class="s2"> work at Dundler Mifflin.&quot;</span>
</span><span class='line'>  <span class="o">=&gt;</span> <span class="s2">&quot;3 women work at Dundler Mifflin.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>How convenient is that!? ActionView handles a very large number of irregular pluralizations, singularizations, even uncountables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;movies&quot;</span><span class="o">.</span><span class="n">singularize</span>
</span><span class='line'>  <span class="o">=&gt;</span> <span class="s2">&quot;movie&quot;</span>    <span class="c1"># not &quot;movy&quot;</span>
</span><span class='line'><span class="s2">&quot;species&quot;</span><span class="o">.</span><span class="n">pluralize</span>
</span><span class='line'>  <span class="o">=&gt;</span> <span class="s2">&quot;species&quot;</span>  <span class="c1"># not &quot;specieses&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>But sometimes it breaks</h3>

<p>Unfortunately, there are some edge cases — untracked irregular pluralizations and words with multiple acceptable pluralizations, which often rely on context or personal preference. When I noticed that some common pluralizations, weren’t being caught by pluralize, I had the same thought I’m sure many programming students have had:</p>

<blockquote><p>Submit a pull request to Rails!</p></blockquote>

<p>But first, I have to find which file I would find this relationship in, so I can actually make the change. And <a href="https://github.com/rails/rails/blob/92f567ab30f240a1de152061a6eee76ca6c4da86/activesupport/lib/active_support/inflections.rb">here</a> it is. Turns out, the inflection rules have been frozen to prevent applications that rely on relationships won’t break.</p>

<iframe width="770" height="480" src="//www.youtube.com/embed/WWaLxFIVX1s" frameborder="0" allowfullscreen></iframe>


<h3>Luckily we can fix it</h3>

<p>For example, ActionView incorrectly assumes <em>human</em> should be pluralized to <em>humen</em>. We can override this using the <a href="https://github.com/rails/rails/blob/4e327225947b933d5434509e02e98226c581adc1/activesupport/lib/active_support/inflector/inflections.rb#L128">irregular</a> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;human&quot;</span><span class="o">.</span><span class="n">pluralize</span>
</span><span class='line'>  <span class="o">=&gt;</span> <span class="s2">&quot;humen&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Inflector</span><span class="o">.</span><span class="n">inflections</span> <span class="k">do</span> <span class="o">|</span><span class="n">inflect</span><span class="o">|</span>
</span><span class='line'>  <span class="n">inflect</span><span class="o">.</span><span class="n">irregular</span> <span class="s2">&quot;human&quot;</span><span class="p">,</span> <span class="s2">&quot;humans&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;human&quot;</span><span class="o">.</span><span class="n">pluralize</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;humans&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you’re using a word with identical singular and plural spelling — or if it has pluralizations for both a collection and multiple instances and you would prefer to use the latter — you should make use of the <a href="https://github.com/rails/rails/blob/4e327225947b933d5434509e02e98226c581adc1/activesupport/lib/active_support/inflector/inflections.rb#L162">uncountable</a> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;candy&quot;</span><span class="o">.</span><span class="n">pluralize</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;candies&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;gossip&quot;</span><span class="o">.</span><span class="n">pluralize</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;gossips&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:Inflector</span><span class="o">.</span><span class="n">inflections</span> <span class="k">do</span> <span class="o">|</span><span class="n">inflect</span><span class="o">|</span>
</span><span class='line'> <span class="n">inflect</span><span class="o">.</span><span class="n">uncountable</span> <span class="s2">&quot;candy&quot;</span><span class="p">,</span> <span class="s2">&quot;gossip&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;candy&quot;</span><span class="o">.</span><span class="n">pluralize</span>
</span><span class='line'> <span class="o">=&gt;</span> <span class="s2">&quot;candy&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;gossip&quot;</span><span class="o">.</span><span class="n">pluralize</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;gossip&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unlike the <code>plural</code> method, which creates a link between the singular and plural versions of a word, <code>uncountable</code> actually adds the word (or words if multiple arguments are passed in) to an <code>@uncountables</code> array, which contains each word ActionView will consider to have equivalent singular and equal spellings. The array begins with <a href="https://github.com/rails/rails/blob/92f567ab30f240a1de152061a6eee76ca6c4da86/activesupport/lib/active_support/inflections.rb#L68">10 words</a>, but you can add to it as you see fit.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@uncountables</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;equipment&quot;</span><span class="p">,</span> <span class="s2">&quot;information&quot;</span><span class="p">,</span> <span class="s2">&quot;rice&quot;</span><span class="p">,</span> <span class="s2">&quot;money&quot;</span><span class="p">,</span> <span class="s2">&quot;species&quot;</span><span class="p">,</span> <span class="s2">&quot;series&quot;</span><span class="p">,</span> <span class="s2">&quot;fish&quot;</span><span class="p">,</span> <span class="s2">&quot;sheep&quot;</span><span class="p">,</span> <span class="s2">&quot;jeans&quot;</span><span class="p">,</span> <span class="s2">&quot;police&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>When is customization worth it?</h3>

<p>If you find ActionView doesn’t properly singularize or pluralize a commonly used word within your application, it is definitely in your best interest to manually create its singular and plural states. If something within your domain model that will warrant its own model, table, views and controller isn’t being properly handled by ActionView, you should manually amend ActionView to perceive the relationship as you see fit. This will allow you to stay DRY and utilize the full capacity of ActiveRecord associations.</p>

<p>Happy pluralizing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git for Non-Programmers]]></title>
    <link href="http://pat-whitrock.github.io/blog/2014/02/27/git-for-non-programmers/"/>
    <updated>2014-02-27T19:51:38-05:00</updated>
    <id>http://pat-whitrock.github.io/blog/2014/02/27/git-for-non-programmers</id>
    <content type="html"><![CDATA[<p>Git is an amazing tool for collaboration and version control, but its merits are largely unknown to the general public. Over the past few years, amazing collaborative tools (e.g. Google Drive) have become popular for word processing, spreadsheets and other common needs for the average person. However, these tools don’t offer sophisticated version control — they are limited to moving linearly backwards and forwards a certain number of steps.</p>

<p>This limits our ability to create different versions of the same document to test different approaches to a problem or work on the same content at the same time without stepping on each other’s feet or creating entirely new files. Any non-developer who has worked in a normal office setting has probably encountered a project that quickly devolved into folders containing timestamped versions of the same file. If you’re like me, you probably thought putting that on a shared drive in the cloud put you one step ahead of the game. Sadly, that’s probably true, but that’s no excuse not to step up your game some more with Git. That’s right — Git can handle more than just code.</p>

<p>This may seem like a crazy idea — Git wasn’t created to handle spreadsheets or word processing. Well, you know what sounds even crazier? Having a ton of folders with timestamped files on everyone’s hard drive! Using <code>git add</code>, <code>commit</code>, <code>branch</code>, <code>merge</code> and <code>push</code> is simple to learn and comes with a number of added benefits.</p>

<h3>Version Control for Spreadsheets</h3>

<p>Let’s try out some version control in MS Excel. We’ll start out by creating a simple spreadsheet as an XLSX (Excel’s modern default filetype), an XLS (preceded XLSX) and a CSV (comma-separated values). For each set of changes, we’ll create a new branch, add and commit our changes, then switch back to our master branch and merge the two.</p>

<p><img src="https://d262ilb51hltx0.cloudfront.net/max/800/1*dbNPHgeMBz6ByWCnXA75Jg.png" alt="Original .xls, .xlsx &amp; .csv files" /></p>

<p>First, let’s try making some simple edits to our spreadsheets. To start off, we’ll make some small edits and delete a row.</p>

<p><img src="https://d262ilb51hltx0.cloudfront.net/max/800/1*ISkg5HyYMI1U1f2rJBU4Nw.png" alt="Text-edited .xls, .xlsx &amp; .csv files" /></p>

<p>No problems here. Next, let’s try something a bit more advanced. We’ll be adding some simple formulas (not in our CSV, it doesn’t support formulas).</p>

<p><img src="https://d262ilb51hltx0.cloudfront.net/max/800/1*G-XhUMnrDCmE84l6RfMDmw.png" alt="Formula-edited .xls &amp;.xlsx files" /></p>

<p>Still good! One more quick test — let’s see what happens when we edit some styles, like text color and background color.</p>

<p><img src="https://d262ilb51hltx0.cloudfront.net/max/800/1*9u1PbzWq9u-nHe8TP3JqCg.png" alt="Style-edited .xls &amp;.xlsx files" /></p>

<p>That works, too! Awesome — Git can understand our spreadsheets well enough for us to branch off, make changes and then merge them back in.</p>

<h3>Version Control for Word Processing</h3>

<p>Next up, word processing. We’re going to follow that same workflow from our spreadsheets — we’ll create a new branch, add and commit our changes, then switch back to our master branch and merge the two.</p>

<p><img src="https://d262ilb51hltx0.cloudfront.net/max/800/1*wi454P_UTyJk9M_VGbm72A.png" alt="Original .docx" /></p>

<p>We’re starting out with a DOCX file — MS Word’s standard filetype. It has a few quotes in there — nothing crazy. Let’s see what happens when we remove the middle one and add a new one at the end.</p>

<p><img src="https://d262ilb51hltx0.cloudfront.net/max/800/1*VtNtSVi2tScJ1Nmc-v39UA.png" alt="Text-edited .docx" /></p>

<p>All good. If you think about it, the contents of a word document are basically the same as the contents of an HTML document — they’re both just plain text in different languages. Or at least they are until you do something else to your word doc, like change up all the spacing, text styles, colors and whatnot. Then what happens?</p>

<p><img src="https://d262ilb51hltx0.cloudfront.net/max/800/1*iGxrobm17YmuBxso5m1Gjw.png" alt="Style-edited .docx" /></p>

<p>Well, that’s no good. Surprisingly, we were able to merge without having to resolve any conflicts, but it looks like Git made some wrong assumptions. Still, we were able to edit our content no problem. So long as we work on our content before our presentation, we should be fine.</p>

<h3>Collaborative Benefits</h3>

<p>We’ve really only covered Git’s version control benefits, but its collaborative features can be useful, too. If you incorprate Github into the mix, you and your collaborators have access to even more great features. For example, you could all fork and clone the same repository, work on the same file or collection of files, then push and send a pull request for your team’s leader (e.g. an editor) to review. The leader can even choose to include pieces of individual pull requests and exclude others. And he doesn’t have to download twenty versions of the same file or folder, all with the same name, and clutter his desktop.</p>

<h3>Things to Keep in Mind</h3>

<p>Git has its limitations. If you make a lot of drastic changes to a large file, Git might freak out and have no idea what to do, so it’ll declare basically everything a merge conflict. While this is really annoying, it’s still better than it making a bunch of assumptions and breaking your file.</p>

<p>It’s good practice to separate your work on content and style. Git is built to handle changes to code, which is text. So long as your work is limited to your content, you should be fine. Also, the simpler your filetype, the easier it will be for git to manage.</p>

<p>Github’s pull request interface is amazing. Unfortunately, you can’t preview pull requests for certain types of documents like DOCX, XLSX and other filetypes that most people use everyday. But, that interface might exist somewhere else — go find it! Or work your way around it by converting your file to something Github can understand.</p>

<h3>TL;DR</h3>

<p>Should I just timestamp a bunch of files, throw them in folders and email everyone I work with?</p>

<iframe width="770" height="480" src="//www.youtube.com/embed/31g0YE61PLQ" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Logic Behind Logical Operators]]></title>
    <link href="http://pat-whitrock.github.io/blog/2014/02/13/the-logic-behind-logical-operators/"/>
    <updated>2014-02-13T17:26:23-05:00</updated>
    <id>http://pat-whitrock.github.io/blog/2014/02/13/the-logic-behind-logical-operators</id>
    <content type="html"><![CDATA[<p>One of the most compelling aspects of the Ruby language is the sweetness of its syntactic sugar. This made the almost ubiquitous use of the <code>&amp;&amp;</code> and <code>||</code> operators over their semantically pleasing counterparts and and or all the more surprising to me. It turns out the two sets of operators are actually different in a meaningful way.</p>

<h3>So what’s the difference?</h3>

<p><strong>Precedence</strong>. Huh? Precedence is the same as <strong>Order of Operations</strong>. Remember <strong>PEMDAS</strong> from grade school? It’s that acronym for <strong>P</strong>arentheses, <strong>E</strong>xponents, <strong>M</strong>ultiplication, <strong>D</strong>ivision, <strong>A</strong>ddition, <strong>S</strong>ubtraction. The operators at the beginning of <strong>PEMDAS</strong> (parentheses) are considered first, then the next (exponents), and so on. Operator precedence in Ruby and other programming languages works the same way — there are just more operators. Got it? Got it. Moving on…</p>

<p><code>&amp;&amp;</code> and <code>||</code> have a higher precedence than <em>and</em> and <em>or</em>. This means Ruby will consider them first. Seems kind of harmless as long as we’re not mixing the two sets of operators (e.g. using <code>&amp;&amp;</code> and <code>or</code>) in the same expression, but the real problem doesn’t lie at either of these levels of precedence. The troublesome area is the space between.</p>

<p>Assignment operators fall below <code>&amp;&amp;</code> and <code>||</code>, but above and and or. This starts to cause all sorts of problems when we use the latter because expressions stop behaving the way we assume they should.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">value</span> <span class="o">=</span> <span class="kp">false</span> <span class="o">||</span> <span class="kp">true</span>  <span class="c1"># (value) = (false || true)</span>
</span><span class='line'>  <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="n">value</span>
</span><span class='line'>  <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="n">value</span> <span class="o">=</span> <span class="kp">false</span> <span class="ow">or</span> <span class="kp">true</span>  <span class="c1"># (value = false) or (true)</span>
</span><span class='line'>  <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="n">value</span>
</span><span class='line'>  <span class="o">=&gt;</span> <span class="kp">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let’s say we want to compare two values and assign their return value to a variable. The first set of operations occurs how we expect. The expression <code>false || true</code> returns <code>true</code>. Then <code>true</code> is assigned to <code>value</code>. The second set of operations looks like it should do the same, but it doesn’t. The <code>=</code> assignment operator has the highest precedence, so <code>false</code> is assigned to <code>value</code>. Then <code>value</code> is compared to <code>true</code> via the <code>or</code> operator. This returns <code>true</code>, but <code>value</code> returns false, which wasn’t our intention.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">value</span> <span class="o">=</span> <span class="kp">true</span> <span class="o">&amp;&amp;</span> <span class="kp">false</span>  <span class="c1"># (value) = (true &amp;&amp; false)</span>
</span><span class='line'>  <span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="n">value</span>
</span><span class='line'>  <span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'><span class="n">value</span> <span class="o">=</span> <span class="kp">true</span> <span class="ow">and</span> <span class="kp">false</span>  <span class="c1"># (value = true) and (false)</span>
</span><span class='line'>  <span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="n">value</span>
</span><span class='line'>  <span class="o">=&gt;</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>We encounter the same problem with the code above.</p>

<p>There’s another key difference between these two sets of operators. <code>&amp;&amp;</code> is actually one level of precedence higher than <code>||</code>, whereas and and or share their level of precedence. I assume this is the case because of the assumption that we are more likely to compare chains of <code>&amp;&amp;</code> expressions with the <code>||</code> operator than vice versa because the former has more practical implementations. <code>and</code> and <code>or</code> have identical precedence, so their expressions are executed in the order in which they occur, which is rarely our intention.</p>

<h3>Cool, I get how it works. Now I can use and and or, right?</h3>

<p>Wrong. Why would you do that to yourself? Because it’s prettier? Unless you’re writing specific types of expressions, you’ll have to resort to using unnecessary parentheses. Gross.</p>

<p>Because you just read this awesome blog post and now you know how they work? Well, did everyone you know read this blog post? I didn’t think so. Even if you know your code does one thing, your collaborators will probably assume it does something else.</p>

<h3>TL;DR</h3>

<ol>
<li><code>&amp;&amp;</code> and <code>||</code> have a higher precedence than <code>and</code> and <code>or</code>.</li>
<li>Assignment operators, like =, have a lower precedence than <code>&amp;&amp;</code> and <code>||</code> (good), but higher than <code>and</code> and <code>or</code> (bad).</li>
<li><code>&amp;&amp;</code> has higher precedence than <code>||</code> (good). <code>and</code> and <code>or</code> have the same (bad).</li>
<li>Using <code>&amp;&amp;</code> and <code>||</code> is the convention for a reason. Don’t be that guy.</li>
<li>If you get confused, just use parentheses. Parentheses are your friends. Make it work now. Refactor later.</li>
</ol>

]]></content>
  </entry>
  
</feed>
